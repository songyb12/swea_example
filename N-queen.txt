
// https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV7GKs06AU0DFAXB
// N-Queen
#if 00

#include <stdio.h>
#include <string.h>
int N, T, t;
int ans;

int a[10 + 1][10 + 1];

int dy[3] = { -1, -1, -1 };
int dx[3] = { -1, 0, 1 };
int check(int y, int x) {

	for (int i = 0; i < 3; i++) {
		for (int j = 1; j < N; j++) {
			int nx = x + j*dx[i];
			int ny = y + j*dy[i];
			if (nx < 0 || ny < 0 || nx >= N || ny >= N) break;
			if (a[ny][nx] == 1) return 1;
		}
	}
	return 0;
}
void queen(int num) {

	// 아직 놓기 전
	if (num == N) {
		//printf("종료\n");
		ans++; return;
	}
	for (int x = 0; x < N; x++) {
		
		// 놓을 수 있는지 확인
		if (check(num, x) == 1) continue;
		// 놓음
		//printf("%d %d 에 퀸\n", num+1, x+1);
		a[num][x] = 1;
		// 다음 퀸 판단하러 감
		queen(num + 1);
		// 안 놓았는 경우로 복귀		--> 이 경우 덕분에 init가 필요없다.
		a[num][x] = 0;
	}

}

int main() {

	scanf("%d", &T);
	for (t = 1; t <= T; t++) {
		scanf("%d", &N);
		ans = 0;
		queen(0);
		printf("#%d %d\n", t, ans);
	}
	return 0;
}
#endif



#if 00
#include <stdio.h>
#include <math.h>

#define UP		0
#define DOWN	1
#define LEFT	2
#define RIGHT	3

int state[10000000];
int T, t;
int ans;
int a[4][4];
int dx[4] = { 0, 0, -1, 1 };
int dy[4] = { -1, 1, 0, 0 };


void solve(int y, int x, int count, int num) {

	int nx, ny;
	num += a[y][x] * pow(10, count-1);
	// printf("%d %d %d %d\n", y, x, count, num);

	if (count == 7) {
		if (state[num] != t) {
			state[num] = t;
			ans++;
		}
		return;
	}

	for (int i = 0; i < 4; i++) {
		
		ny =  y + dy[i];
		nx =  x + dx[i];
		if (ny < 0 || nx < 0 || ny >= 4 || nx >= 4) continue;
		solve(ny, nx, count+1, num);
		
	}

}
void debug() {
	for (int y = 0; y < 4; y++) {
		for (int x = 0; x < 4; x++) {
			printf("%d ", a[y][x]);
		}
		printf("\n");
	}
}
int main() {

	scanf("%d", &T);
	for (t = 1; t <= T; t++) {
		ans = 0;
		for (int y = 0; y < 4; y++) {
			for (int x = 0; x < 4; x++) {
				scanf("%d", &a[y][x]);
			}
		}
		// debug();
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				solve(i, j, 1, 0);
			}
		}
		printf("#%d %d\n", t, ans);
	}
	
}




#endif
