// 다시. 너무 복잡하게 한듯
#if 00

/*
N*N 크기의 정사각형 모양의 방에 사람들이 앉아 있다.
점심을 먹기 위해 아래 층으로 내려가야 하는데, 밥을 빨리 먹기 위해 최대한 빠른 시간 내에 내려가야 한다.
방 안의 사람들은 P로, 계단 입구를 S라고 했을 때 [Fig. 1]은 사람의 위치와 계단 입구의 위치를 표시한 모습이다.

[Fig. 1]

이동 완료 시간은 모든 사람들이 계단을 내려가 아래 층으로 이동을 완료한 시간이다.
사람들이 아래층으로 이동하는 시간은 계단 입구까지 이동 시간과 계단을 내려가는 시간이 포함된다.

① 계단 입구까지 이동 시간
- 사람이 현재 위치에서 계단의 입구까지 이동하는데 걸리는 시간으로 다음과 같이 계산한다.
- 이동 시간(분) = | PR - SR | + | PC - SC |
(PR, PC : 사람 P의 세로위치, 가로위치, SR, SC : 계단 입구 S의 세로위치, 가로위치)

② 계단을 내려가는 시간
- 계단을 내려가는 시간은 계단 입구에 도착한 후부터 계단을 완전히 내려갈 때까지의 시간이다.
- 계단 입구에 도착하면, 1분 후 아래칸으로 내려 갈 수 있다.
- 계단 위에는 동시에 최대 3명까지만 올라가 있을 수 있다.
- 이미 계단을 3명이 내려가고 있는 경우, 그 중 한 명이 계단을 완전히 내려갈 때까지 계단 입구에서 대기해야 한다.
- 계단마다 길이 K가 주어지며, 계단에 올라간 후 완전히 내려가는데 K 분이 걸린다.

사람의 위치와 계단 입구의 위치 및 계단의 길이 정보가 표시된 N*N 크기의 지도가 주어진다.
이때, 모든 사람들이 계단을 내려가 이동이 완료되는 시간이 최소가 되는 경우를 찾고,
그 때의 소요시간을 출력하는 프로그램을 작성하라.
*/
#include <stdio.h>
#include <math.h>

int t, T, N;
int a[10][10];
int pp = 0, sp = 0;
int min = 0;
struct _d2{
	int y; int x; int waiting; int size;
} stair[2];
struct _p{	// y, x, stair, distance
	int y; int x; int s; int d; int state;
} people[10];	// 거리 측정a[

int stair_add(int stair_num) {
	for (int i = 0; i < pp; i++) {
		int stair_num = people[i].s;
		if (stair[stair_num].waiting == 3) continue;
		if (people[i].d == 0) stair[stair_num]
		people[i].d --;

	}
	
}
int solve() {
	
	// teaming
	for (int i = 0; i < (1 << pp); i++) {
		for (int j = 0; j < pp; j++) {
			if((1<<j) & i)	people[j].s = 1;
			else people[j].s = 0;
		}
		// calc
		for (int j = 0; j < pp; j++) {
			people[j].d = abs(stair[people[j].s].x - people[j].x) + abs(stair[people[j].s].y - people[j].y);
		}

		// process
		int t = 0;
		while (t > min) {
			// 종료 조건 추가
			for (int k = 0; k < pp; k++) {
				
				t++;
			}
			if () break;
		}
		
	}

	
}
int main() {
	scanf("%d", &T);
	for (t = 1; t <= T; t++) {
		scanf("%d", &N);
		pp = 0, sp = 0;
		for (int i = 0; i < N; i++)	for (int j = 0; j < N; j++) {
				scanf("%d", &a[i][j]);
				if (a[i][j] == 1) {
					people[pp].x = j;
					people[pp].y = i;
					++pp;
				}
				if (a[i][j] > 1) {
					stair[sp].x = j;
					stair[sp].y = i;
					stair[sp].size = a[i][j];
					++sp;
				}
		}
		
		solve();
	}

	return 0;
}


#endif